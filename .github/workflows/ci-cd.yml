name: ⚡ Fast CI/CD - Microservices Project

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # 🧪 Test Auth Service
  test_auth:
    name: 🧪 Test Auth Service
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'" 
          --health-interval 2s 
          --health-timeout 2s 
          --health-retries 10
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 2s
          --health-timeout 2s
          --health-retries 10

    steps:
      - name: 🧩 Checkout source code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: 📦 Install dependencies
        working-directory: ./auth
        run: npm ci

      - name: 🧪 Run tests (Auth)
        working-directory: ./auth
        env:
          MONGO_URI: mongodb://mongo:27017/ep_auth_db
          JWT_SECRET: 11042004
          RABBITMQ_URL: amqp://rabbitmq
        run: npm test -- --timeout 15000 --exit

  # 🧪 Test Product Service (chạy song song)
  test_product:
    name: 🧪 Test Product Service
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 2s
          --health-timeout 2s
          --health-retries 10
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 2s
          --health-timeout 2s
          --health-retries 10

    steps:
      - name: 🧩 Checkout source code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: 📦 Install dependencies
        run: |
          cd auth && npm ci && cd ..
          cd product && npm ci

      - name: 🚀 Start Auth service (background)
        run: |
          cd auth
          nohup npm start > /dev/null 2>&1 &
          sleep 6

      - name: 🧪 Run tests (Product)
        working-directory: ./product
        env:
          MONGO_URI: mongodb://mongo:27017/ep_product_db
          JWT_SECRET: 11042004
          RABBITMQ_URL: amqp://rabbitmq
          LOGIN_TEST_USER: testuser
          LOGIN_TEST_PASSWORD: password
        run: npm test -- --timeout 15000 --exit

  # 🐳 Build & Push Docker Images (sau khi test pass)
  build_and_push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test_auth, test_product]

    steps:
      - name: 🧩 Checkout source code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🧱 Create .env files
        run: |
          mkdir -p auth product order api-gateway
          echo "MONGO_URI=mongodb://mongo:27017/microservices" | tee -a auth/.env product/.env order/.env api-gateway/.env > /dev/null
          echo "RABBITMQ_URL=amqp://rabbitmq:5672" | tee -a auth/.env product/.env order/.env api-gateway/.env > /dev/null
          echo "JWT_SECRET=11042004" | tee -a auth/.env product/.env order/.env api-gateway/.env > /dev/null
          echo "PORT=3000" > auth/.env
          echo "PORT=3001" > product/.env
          echo "PORT=3002" > order/.env
          echo "PORT=3003" > api-gateway/.env

      - name: 🐳 Build and push Auth service
        uses: docker/build-push-action@v6
        with:
          context: ./auth
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest

      - name: 🐳 Build and push Product service
        uses: docker/build-push-action@v6
        with:
          context: ./product
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest

      - name: 🐳 Build and push Order service
        uses: docker/build-push-action@v6
        with:
          context: ./order
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest

      - name: 🐳 Build and push API Gateway
        uses: docker/build-push-action@v6
        with:
          context: ./api-gateway
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
